// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject2
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// NoteWin
        /// </summary>
        public void NoteWin()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(33, 20));
        }
        
        /// <summary>
        /// AddBtnAssertMethod - Use 'AddBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AddBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            #endregion

            // Verify that the 'Height' property of '+' button equals '49'
            Assert.AreEqual(this.AddBtnAssertMethodExpectedValues.UIItemButtonHeight, uIItemButton.Height);

            // Verify that the 'Width' property of '+' button equals '49'
            Assert.AreEqual(this.AddBtnAssertMethodExpectedValues.UIItemButtonWidth, uIItemButton.Width);

            // Verify that the 'DisplayText' property of '+' button equals '+'
            Assert.AreEqual(this.AddBtnAssertMethodExpectedValues.UIItemButtonDisplayText, uIItemButton.DisplayText);
        }
        
        /// <summary>
        /// ColorBtnAssertMethod - Use 'ColorBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ColorBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UIMainWindowWindow.UIItemButton1;
            #endregion

            // Verify that the 'Height' property of '...' button equals '49'
            Assert.AreEqual(this.ColorBtnAssertMethodExpectedValues.UIItemButton1Height, uIItemButton1.Height);

            // Verify that the 'Width' property of '...' button equals '49'
            Assert.AreEqual(this.ColorBtnAssertMethodExpectedValues.UIItemButton1Width, uIItemButton1.Width);

            // Verify that the 'DisplayText' property of '...' button equals '...'
            Assert.AreEqual(this.ColorBtnAssertMethodExpectedValues.UIItemButton1DisplayText, uIItemButton1.DisplayText);
        }
        
        /// <summary>
        /// DelBtnAssertMethod - Use 'DelBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void DelBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIDelButton = this.UIMainWindowWindow.UIDelButton;
            #endregion

            // Verify that the 'Height' property of 'Del' button equals '49'
            Assert.AreEqual(this.DelBtnAssertMethodExpectedValues.UIDelButtonHeight, uIDelButton.Height);

            // Verify that the 'Width' property of 'Del' button equals '48'
            Assert.AreEqual(this.DelBtnAssertMethodExpectedValues.UIDelButtonWidth, uIDelButton.Width);

            // Verify that the 'DisplayText' property of 'Del' button equals 'Del'
            Assert.AreEqual(this.DelBtnAssertMethodExpectedValues.UIDelButtonDisplayText, uIDelButton.DisplayText);
        }
        
        /// <summary>
        /// ColorWin
        /// </summary>
        public void ColorWin()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UIMainWindowWindow.UIItemButton1;
            #endregion

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(30, 32));
        }
        
        /// <summary>
        /// MainWin
        /// </summary>
        public void MainWin()
        {
            #region Variable Declarations
            WpfWindow uIWpfWindow = this.UIMainWindowWindow.UIWpfWindow;
            WpfButton uIDelButton = this.UIMainWindowWindow.UIDelButton;
            #endregion

            // Click 'Wpf' window
            Mouse.Click(uIWpfWindow, new Point(86, 36));

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(27, 27));
        }
        
        /// <summary>
        /// MainAddBtnAssertMethod - Use 'MainAddBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MainAddBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            #endregion

            // Verify that the 'DisplayText' property of '+' button equals '+'
            Assert.AreEqual(this.MainAddBtnAssertMethodExpectedValues.UIItemButtonDisplayText, uIItemButton.DisplayText);

            // Verify that the 'Width' property of '+' button equals '49'
            Assert.AreEqual(this.MainAddBtnAssertMethodExpectedValues.UIItemButtonWidth, uIItemButton.Width);

            // Verify that the 'Height' property of '+' button equals '49'
            Assert.AreEqual(this.MainAddBtnAssertMethodExpectedValues.UIItemButtonHeight, uIItemButton.Height);
        }
        
        /// <summary>
        /// MainColorBtnAssertMethod - Use 'MainColorBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void MainColorBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UIMainWindowWindow.UIItemButton1;
            #endregion

            // Verify that the 'Height' property of '...' button equals '49'
            Assert.AreEqual(this.MainColorBtnAssertMethodExpectedValues.UIItemButton1Height, uIItemButton1.Height);

            // Verify that the 'Width' property of '...' button equals '49'
            Assert.AreEqual(this.MainColorBtnAssertMethodExpectedValues.UIItemButton1Width, uIItemButton1.Width);

            // Verify that the 'DisplayText' property of '...' button equals '...'
            Assert.AreEqual(this.MainColorBtnAssertMethodExpectedValues.UIItemButton1DisplayText, uIItemButton1.DisplayText);
        }
        
        /// <summary>
        /// CloseBtnAssertMethod - Use 'CloseBtnAssertMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CloseBtnAssertMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton2 = this.UIMainWindowWindow.UIItemButton2;
            #endregion

            // Verify that the 'DisplayText' property of '×' button equals '×'
            Assert.AreEqual(this.CloseBtnAssertMethodExpectedValues.UIItemButton2DisplayText, uIItemButton2.DisplayText);

            // Verify that the 'Height' property of '×' button equals '49'
            Assert.AreEqual(this.CloseBtnAssertMethodExpectedValues.UIItemButton2Height, uIItemButton2.Height);

            // Verify that the 'Width' property of '×' button equals '51'
            Assert.AreEqual(this.CloseBtnAssertMethodExpectedValues.UIItemButton2Width, uIItemButton2.Width);
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WpfButton uIItemButton2 = this.UIMainWindowWindow.UIItemButton2;
            #endregion

            // Click '×' button
            Mouse.Click(uIItemButton2, new Point(29, 23));
        }
        
        /// <summary>
        /// Open
        /// </summary>
        public void Open()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIUiexeListItem.UINameEdit;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(32, 9));
        }
        
        #region Properties
        public virtual AddBtnAssertMethodExpectedValues AddBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mAddBtnAssertMethodExpectedValues == null))
                {
                    this.mAddBtnAssertMethodExpectedValues = new AddBtnAssertMethodExpectedValues();
                }
                return this.mAddBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual ColorBtnAssertMethodExpectedValues ColorBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mColorBtnAssertMethodExpectedValues == null))
                {
                    this.mColorBtnAssertMethodExpectedValues = new ColorBtnAssertMethodExpectedValues();
                }
                return this.mColorBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual DelBtnAssertMethodExpectedValues DelBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mDelBtnAssertMethodExpectedValues == null))
                {
                    this.mDelBtnAssertMethodExpectedValues = new DelBtnAssertMethodExpectedValues();
                }
                return this.mDelBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual MainAddBtnAssertMethodExpectedValues MainAddBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mMainAddBtnAssertMethodExpectedValues == null))
                {
                    this.mMainAddBtnAssertMethodExpectedValues = new MainAddBtnAssertMethodExpectedValues();
                }
                return this.mMainAddBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual MainColorBtnAssertMethodExpectedValues MainColorBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mMainColorBtnAssertMethodExpectedValues == null))
                {
                    this.mMainColorBtnAssertMethodExpectedValues = new MainColorBtnAssertMethodExpectedValues();
                }
                return this.mMainColorBtnAssertMethodExpectedValues;
            }
        }
        
        public virtual CloseBtnAssertMethodExpectedValues CloseBtnAssertMethodExpectedValues
        {
            get
            {
                if ((this.mCloseBtnAssertMethodExpectedValues == null))
                {
                    this.mCloseBtnAssertMethodExpectedValues = new CloseBtnAssertMethodExpectedValues();
                }
                return this.mCloseBtnAssertMethodExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddBtnAssertMethodExpectedValues mAddBtnAssertMethodExpectedValues;
        
        private ColorBtnAssertMethodExpectedValues mColorBtnAssertMethodExpectedValues;
        
        private DelBtnAssertMethodExpectedValues mDelBtnAssertMethodExpectedValues;
        
        private MainAddBtnAssertMethodExpectedValues mMainAddBtnAssertMethodExpectedValues;
        
        private MainColorBtnAssertMethodExpectedValues mMainColorBtnAssertMethodExpectedValues;
        
        private CloseBtnAssertMethodExpectedValues mCloseBtnAssertMethodExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIDebugWindow mUIDebugWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of '+' button equals '49'
        /// </summary>
        public int UIItemButtonHeight = 49;
        
        /// <summary>
        /// Verify that the 'Width' property of '+' button equals '49'
        /// </summary>
        public int UIItemButtonWidth = 49;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '+' button equals '+'
        /// </summary>
        public string UIItemButtonDisplayText = "+";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ColorBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ColorBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of '...' button equals '49'
        /// </summary>
        public int UIItemButton1Height = 49;
        
        /// <summary>
        /// Verify that the 'Width' property of '...' button equals '49'
        /// </summary>
        public int UIItemButton1Width = 49;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '...' button equals '...'
        /// </summary>
        public string UIItemButton1DisplayText = "...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DelBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class DelBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of 'Del' button equals '49'
        /// </summary>
        public int UIDelButtonHeight = 49;
        
        /// <summary>
        /// Verify that the 'Width' property of 'Del' button equals '48'
        /// </summary>
        public int UIDelButtonWidth = 48;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Del' button equals 'Del'
        /// </summary>
        public string UIDelButtonDisplayText = "Del";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MainAddBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainAddBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '+' button equals '+'
        /// </summary>
        public string UIItemButtonDisplayText = "+";
        
        /// <summary>
        /// Verify that the 'Width' property of '+' button equals '49'
        /// </summary>
        public int UIItemButtonWidth = 49;
        
        /// <summary>
        /// Verify that the 'Height' property of '+' button equals '49'
        /// </summary>
        public int UIItemButtonHeight = 49;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MainColorBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MainColorBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Height' property of '...' button equals '49'
        /// </summary>
        public int UIItemButton1Height = 49;
        
        /// <summary>
        /// Verify that the 'Width' property of '...' button equals '49'
        /// </summary>
        public int UIItemButton1Width = 49;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '...' button equals '...'
        /// </summary>
        public string UIItemButton1DisplayText = "...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseBtnAssertMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CloseBtnAssertMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '×' button equals '×'
        /// </summary>
        public string UIItemButton2DisplayText = "×";
        
        /// <summary>
        /// Verify that the 'Height' property of '×' button equals '49'
        /// </summary>
        public int UIItemButton2Height = 49;
        
        /// <summary>
        /// Verify that the 'Width' property of '×' button equals '51'
        /// </summary>
        public int UIItemButton2Width = 51;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NewBtn";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ColorBtn";
                    this.mUIItemButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIDelButton
        {
            get
            {
                if ((this.mUIDelButton == null))
                {
                    this.mUIDelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DelBtn";
                    this.mUIDelButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDelButton;
            }
        }
        
        public WpfWindow UIWpfWindow
        {
            get
            {
                if ((this.mUIWpfWindow == null))
                {
                    this.mUIWpfWindow = new WpfWindow(this);
                    #region Search Criteria
                    this.mUIWpfWindow.SearchProperties[WpfWindow.PropertyNames.Name] = "ColorWindow";
                    this.mUIWpfWindow.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
                    this.mUIWpfWindow.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIWpfWindow;
            }
        }
        
        public WpfButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton2.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseBtn";
                    this.mUIItemButton2.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton2;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIDelButton;
        
        private WpfWindow mUIWpfWindow;
        
        private WpfButton mUIItemButton2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIUiexeListItem UIUiexeListItem
        {
            get
            {
                if ((this.mUIUiexeListItem == null))
                {
                    this.mUIUiexeListItem = new UIUiexeListItem(this);
                }
                return this.mUIUiexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUiexeListItem mUIUiexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUiexeListItem : WinListItem
    {
        
        public UIUiexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Ui.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
}
